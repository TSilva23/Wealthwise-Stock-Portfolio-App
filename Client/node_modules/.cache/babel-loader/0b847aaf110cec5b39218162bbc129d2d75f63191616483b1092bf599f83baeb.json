{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\n\n/**\n * The {@link formatISO} function options.\n */\n\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string (in loca.l time zone)\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nexport function formatISO(date, options) {\n  var _options$format, _options$representati;\n  const _date = toDate(date);\n  if (isNaN(_date.getTime())) {\n    throw new RangeError(\"Invalid time value\");\n  }\n  const format = (_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : \"extended\";\n  const representation = (_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : \"complete\";\n  let result = \"\";\n  let tzOffset = \"\";\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = addLeadingZeros(_date.getDate(), 2);\n    const month = addLeadingZeros(_date.getMonth() + 1, 2);\n    const year = addLeadingZeros(_date.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    // Add the timezone.\n    const offset = _date.getTimezoneOffset();\n    if (offset !== 0) {\n      const absoluteOffset = Math.abs(offset);\n      const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\n      const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      const sign = offset < 0 ? \"+\" : \"-\";\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = \"Z\";\n    }\n    const hour = addLeadingZeros(_date.getHours(), 2);\n    const minute = addLeadingZeros(_date.getMinutes(), 2);\n    const second = addLeadingZeros(_date.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    const separator = result === \"\" ? \"\" : \"T\";\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    const time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default formatISO;","map":{"version":3,"names":["toDate","addLeadingZeros","formatISO","date","options","_options$format","_options$representati","_date","isNaN","getTime","RangeError","format","representation","result","tzOffset","dateDelimiter","timeDelimiter","day","getDate","month","getMonth","year","getFullYear","concat","offset","getTimezoneOffset","absoluteOffset","Math","abs","hourOffset","trunc","minuteOffset","sign","hour","getHours","minute","getMinutes","second","getSeconds","separator","time","join"],"sources":["/home/tristan/Desktop/Capstone project/Wealthwise/my-app/Client/node_modules/date-fns/formatISO.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\n\n/**\n * The {@link formatISO} function options.\n */\n\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string (in loca.l time zone)\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nexport function formatISO(date, options) {\n  const _date = toDate(date);\n\n  if (isNaN(_date.getTime())) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n\n  let result = \"\";\n  let tzOffset = \"\";\n\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = addLeadingZeros(_date.getDate(), 2);\n    const month = addLeadingZeros(_date.getMonth() + 1, 2);\n    const year = addLeadingZeros(_date.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    // Add the timezone.\n    const offset = _date.getTimezoneOffset();\n\n    if (offset !== 0) {\n      const absoluteOffset = Math.abs(offset);\n      const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\n      const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      const sign = offset < 0 ? \"+\" : \"-\";\n\n      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\n    } else {\n      tzOffset = \"Z\";\n    }\n\n    const hour = addLeadingZeros(_date.getHours(), 2);\n    const minute = addLeadingZeros(_date.getMinutes(), 2);\n    const second = addLeadingZeros(_date.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    const separator = result === \"\" ? \"\" : \"T\";\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    const time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${time}${tzOffset}`;\n  }\n\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default formatISO;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
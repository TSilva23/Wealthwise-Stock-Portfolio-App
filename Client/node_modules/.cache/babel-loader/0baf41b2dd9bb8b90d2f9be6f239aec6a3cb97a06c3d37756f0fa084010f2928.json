{"ast":null,"code":"var _jsxFileName = \"/home/tristan/Desktop/Capstone project/Wealthwise/my-app/Client/src/Components/Stocklist.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction parseCSV(csvData) {\n  // Split the CSV data by new line to get an array of rows\n  const rows = csvData.trim().split('\\n');\n\n  // Extract the header row and parse the columns\n  const headers = rows.shift().split(',');\n\n  // Map the rest of the rows into an array of objects\n  return rows.map(row => {\n    const values = row.split(',');\n    const entry = {};\n    headers.forEach((header, index) => {\n      entry[header] = values[index];\n    });\n    return entry;\n  });\n}\nfunction AllStocksPage() {\n  _s();\n  const [stocks, setStocks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchStocks = async () => {\n      try {\n        const response = await axios.get('/api/all-stocks', {\n          responseType: 'text'\n        });\n        const parsedData = parseCSV(response.data);\n        setStocks(parsedData);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchStocks();\n  }, []);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error loading stocks: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 23\n  }, this);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"All Stocks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: stocks.map((stock, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n          to: `/stock/${stock.symbol}`,\n          children: [stock.symbol, \" - \", stock.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)]\n      }, stock.symbol || index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(AllStocksPage, \"bJomTBoIXUXKUOA0dpo0I2jxh5Y=\");\n_c = AllStocksPage;\nexport default AllStocksPage;\nvar _c;\n$RefreshReg$(_c, \"AllStocksPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","Link","jsxDEV","_jsxDEV","parseCSV","csvData","rows","trim","split","headers","shift","map","row","values","entry","forEach","header","index","AllStocksPage","_s","stocks","setStocks","isLoading","setIsLoading","error","setError","fetchStocks","response","get","responseType","parsedData","data","children","message","fileName","_jsxFileName","lineNumber","columnNumber","stock","to","symbol","name","_c","$RefreshReg$"],"sources":["/home/tristan/Desktop/Capstone project/Wealthwise/my-app/Client/src/Components/Stocklist.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nfunction parseCSV(csvData) {\n    // Split the CSV data by new line to get an array of rows\n    const rows = csvData.trim().split('\\n');\n  \n    // Extract the header row and parse the columns\n    const headers = rows.shift().split(',');\n  \n    // Map the rest of the rows into an array of objects\n    return rows.map(row => {\n      const values = row.split(',');\n      const entry = {};\n      headers.forEach((header, index) => {\n        entry[header] = values[index];\n      });\n      return entry;\n    });\n  }\n  \n\nfunction AllStocksPage() {\n    const [stocks, setStocks] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        setIsLoading(true);\n        const fetchStocks = async () => {\n            try {\n                const response = await axios.get('/api/all-stocks', { responseType: 'text' });\n                const parsedData = parseCSV(response.data);\n                setStocks(parsedData);\n            } catch (error) {\n                setError(error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchStocks();\n    }, []);\n\n    if (error) return <div>Error loading stocks: {error.message}</div>;\n    if (isLoading) return <div>Loading...</div>;\n\n    return (\n        <div>\n            <h1>All Stocks</h1>\n            <ul>\n                {stocks.map((stock, index) => (\n                    <li key={stock.symbol || index}> {/* Prefer unique ID if available */}\n                        <Link to={`/stock/${stock.symbol}`}>{stock.symbol} - {stock.name}</Link>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default AllStocksPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
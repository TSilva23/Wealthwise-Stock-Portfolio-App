{"ast":null,"code":"import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { format } from \"./format.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link formatRelative} function options.\n */\n\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to format\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The date in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws `options.locale` must contain `formatRelative` property\n *\n * @example\n * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday\n * const result = formatRelative(subDays(new Date(), 6), new Date())\n * //=> \"last Thursday at 12:45 AM\"\n */\nexport function formatRelative(date, baseDate, options) {\n  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$weekStartsOn, _options$locale2, _defaultOptions$local;\n  const _date = toDate(date);\n  const _baseDate = toDate(baseDate);\n  const defaultOptions = getDefaultOptions();\n  const locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n  const weekStartsOn = (_ref2 = (_ref3 = (_ref4 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 || (_options$locale2 = options.locale) === null || _options$locale2 === void 0 || (_options$locale2 = _options$locale2.options) === null || _options$locale2 === void 0 ? void 0 : _options$locale2.weekStartsOn) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 || (_defaultOptions$local = _defaultOptions$local.options) === null || _defaultOptions$local === void 0 ? void 0 : _defaultOptions$local.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : 0;\n  const diff = differenceInCalendarDays(_date, _baseDate);\n  if (isNaN(diff)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n  let token;\n  if (diff < -6) {\n    token = \"other\";\n  } else if (diff < -1) {\n    token = \"lastWeek\";\n  } else if (diff < 0) {\n    token = \"yesterday\";\n  } else if (diff < 1) {\n    token = \"today\";\n  } else if (diff < 2) {\n    token = \"tomorrow\";\n  } else if (diff < 7) {\n    token = \"nextWeek\";\n  } else {\n    token = \"other\";\n  }\n  const formatStr = locale.formatRelative(token, _date, _baseDate, {\n    locale,\n    weekStartsOn\n  });\n  return format(_date, formatStr, {\n    locale,\n    weekStartsOn\n  });\n}\n\n// Fallback for modularized imports:\nexport default formatRelative;","map":{"version":3,"names":["differenceInCalendarDays","format","toDate","defaultLocale","getDefaultOptions","formatRelative","date","baseDate","options","_ref","_options$locale","_ref2","_ref3","_ref4","_options$weekStartsOn","_options$locale2","_defaultOptions$local","_date","_baseDate","defaultOptions","locale","weekStartsOn","diff","isNaN","RangeError","token","formatStr"],"sources":["/home/tristan/Desktop/Capstone project/Wealthwise/my-app/Client/node_modules/date-fns/formatRelative.mjs"],"sourcesContent":["import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { format } from \"./format.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link formatRelative} function options.\n */\n\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to format\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The date in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws `options.locale` must contain `formatRelative` property\n *\n * @example\n * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday\n * const result = formatRelative(subDays(new Date(), 6), new Date())\n * //=> \"last Thursday at 12:45 AM\"\n */\nexport function formatRelative(date, baseDate, options) {\n  const _date = toDate(date);\n  const _baseDate = toDate(baseDate);\n\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const diff = differenceInCalendarDays(_date, _baseDate);\n\n  if (isNaN(diff)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let token;\n  if (diff < -6) {\n    token = \"other\";\n  } else if (diff < -1) {\n    token = \"lastWeek\";\n  } else if (diff < 0) {\n    token = \"yesterday\";\n  } else if (diff < 1) {\n    token = \"today\";\n  } else if (diff < 2) {\n    token = \"tomorrow\";\n  } else if (diff < 7) {\n    token = \"nextWeek\";\n  } else {\n    token = \"other\";\n  }\n\n  const formatStr = locale.formatRelative(token, _date, _baseDate, {\n    locale,\n    weekStartsOn,\n  });\n  return format(_date, formatStr, { locale, weekStartsOn });\n}\n\n// Fallback for modularized imports:\nexport default formatRelative;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
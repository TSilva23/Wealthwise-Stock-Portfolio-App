{"ast":null,"code":"import { getDate } from \"./getDate.mjs\";\nimport { getDay } from \"./getDay.mjs\";\nimport { startOfMonth } from \"./startOfMonth.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekOfMonth} function options.\n */\n\n/**\n * @name getWeekOfMonth\n * @category Week Helpers\n * @summary Get the week of the month of the given date.\n *\n * @description\n * Get the week of the month of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The week of month\n *\n * @example\n * // Which week of the month is 9 November 2017?\n * const result = getWeekOfMonth(new Date(2017, 10, 9))\n * //=> 2\n */\nexport function getWeekOfMonth(date, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _defaultOptions$local;\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn = (_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 || (_options$locale = options.locale) === null || _options$locale === void 0 || (_options$locale = _options$locale.options) === null || _options$locale === void 0 ? void 0 : _options$locale.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 || (_defaultOptions$local = _defaultOptions$local.options) === null || _defaultOptions$local === void 0 ? void 0 : _defaultOptions$local.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0;\n  const currentDayOfMonth = getDate(date);\n  if (isNaN(currentDayOfMonth)) return NaN;\n  const startWeekDay = getDay(startOfMonth(date));\n  let lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;\n  const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeekOfMonth;","map":{"version":3,"names":["getDate","getDay","startOfMonth","getDefaultOptions","getWeekOfMonth","date","options","_ref","_ref2","_ref3","_options$weekStartsOn","_options$locale","_defaultOptions$local","defaultOptions","weekStartsOn","locale","currentDayOfMonth","isNaN","NaN","startWeekDay","lastDayOfFirstWeek","remainingDaysAfterFirstWeek","Math","ceil"],"sources":["/home/tristan/Desktop/Capstone project/Wealthwise/my-app/Client/node_modules/date-fns/getWeekOfMonth.mjs"],"sourcesContent":["import { getDate } from \"./getDate.mjs\";\nimport { getDay } from \"./getDay.mjs\";\nimport { startOfMonth } from \"./startOfMonth.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekOfMonth} function options.\n */\n\n/**\n * @name getWeekOfMonth\n * @category Week Helpers\n * @summary Get the week of the month of the given date.\n *\n * @description\n * Get the week of the month of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The week of month\n *\n * @example\n * // Which week of the month is 9 November 2017?\n * const result = getWeekOfMonth(new Date(2017, 10, 9))\n * //=> 2\n */\nexport function getWeekOfMonth(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const currentDayOfMonth = getDate(date);\n  if (isNaN(currentDayOfMonth)) return NaN;\n\n  const startWeekDay = getDay(startOfMonth(date));\n\n  let lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;\n\n  const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeekOfMonth;\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,eAAe;AACvC,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,iBAAiB,QAAQ,2BAA2B;;AAE7D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAAA,IAAAC,IAAA,EAAAC,KAAA,EAAAC,KAAA,EAAAC,qBAAA,EAAAC,eAAA,EAAAC,qBAAA;EAC5C,MAAMC,cAAc,GAAGV,iBAAiB,CAAC,CAAC;EAC1C,MAAMW,YAAY,IAAAP,IAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,qBAAA,GAChBJ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEQ,YAAY,cAAAJ,qBAAA,cAAAA,qBAAA,GACrBJ,OAAO,aAAPA,OAAO,gBAAAK,eAAA,GAAPL,OAAO,CAAES,MAAM,cAAAJ,eAAA,gBAAAA,eAAA,GAAfA,eAAA,CAAiBL,OAAO,cAAAK,eAAA,uBAAxBA,eAAA,CAA0BG,YAAY,cAAAL,KAAA,cAAAA,KAAA,GACtCI,cAAc,CAACC,YAAY,cAAAN,KAAA,cAAAA,KAAA,IAAAI,qBAAA,GAC3BC,cAAc,CAACE,MAAM,cAAAH,qBAAA,gBAAAA,qBAAA,GAArBA,qBAAA,CAAuBN,OAAO,cAAAM,qBAAA,uBAA9BA,qBAAA,CAAgCE,YAAY,cAAAP,IAAA,cAAAA,IAAA,GAC5C,CAAC;EAEH,MAAMS,iBAAiB,GAAGhB,OAAO,CAACK,IAAI,CAAC;EACvC,IAAIY,KAAK,CAACD,iBAAiB,CAAC,EAAE,OAAOE,GAAG;EAExC,MAAMC,YAAY,GAAGlB,MAAM,CAACC,YAAY,CAACG,IAAI,CAAC,CAAC;EAE/C,IAAIe,kBAAkB,GAAGN,YAAY,GAAGK,YAAY;EACpD,IAAIC,kBAAkB,IAAI,CAAC,EAAEA,kBAAkB,IAAI,CAAC;EAEpD,MAAMC,2BAA2B,GAAGL,iBAAiB,GAAGI,kBAAkB;EAC1E,OAAOE,IAAI,CAACC,IAAI,CAACF,2BAA2B,GAAG,CAAC,CAAC,GAAG,CAAC;AACvD;;AAEA;AACA,eAAejB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}